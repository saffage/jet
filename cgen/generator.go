package cgen

import (
	"bufio"
	"fmt"
	"io"
	"slices"
	"strings"

	"github.com/elliotchance/orderedmap/v2"
	"github.com/saffage/jet/ast"
	"github.com/saffage/jet/checker"
	"github.com/saffage/jet/report"
)

type generator struct {
	*checker.Module

	scope         *checker.Scope
	funcTempVarId int
	funcLabelID   int
	headers       []string
	includeSect   strings.Builder
	typeSect      strings.Builder
	declVarsSect  strings.Builder
	declFnsSect   strings.Builder
	codeSect      strings.Builder
	out           *bufio.Writer
	errors        []error
	indent        int
}

func (gen *generator) defs(
	defs *orderedmap.OrderedMap[*ast.Ident, checker.Symbol],
	owner *checker.Scope,
) (mainFunc *checker.Func) {
	for def := defs.Front(); def != nil; def = def.Next() {
		def := def.Value
		_, isImportedModule := def.(*checker.Module)

		if def.Owner() != owner && !isImportedModule {
			continue
		}

		if attr := checker.GetAttribute(def, "header"); attr != nil {
			header := attr.(*ast.Call).Args.Nodes[0].(*ast.Literal).Value
			if strings.HasPrefix(header, "\"<") && strings.HasSuffix(header, ">\"") {
				header = header[1 : len(header)-1]
			}
			if !slices.Contains(gen.headers, header) {
				gen.headers = append(gen.headers, header)
				gen.includeSect.WriteString(fmt.Sprintf("\n#include %s", header))
			}
		}

		switch sym := def.(type) {
		case *checker.Var:
			gen.globalVarDecl(sym)

		case *checker.Const:
			gen.constDecl(sym)

		case *checker.Struct:
			gen.structDecl(sym)

		case *checker.Enum:
			gen.enumDecl(sym)

		case *checker.Func:
			if sym.Name() == "main" && mainFunc == nil {
				mainFunc = sym
			} else {
				gen.fn(sym)
			}

		case *checker.Module:
			gen.defs(sym.Defs, sym.Scope)

		default:
			report.Warningf("not implemented (%T)", sym)
		}
	}

	return mainFunc
}

func (gen *generator) setScope(scope *checker.Scope) {
	report.TaggedDebugf("cgen", "set scope: %s", scopePath(scope))
	gen.scope = scope
}

func (gen *generator) line(s string) {
	gen.fline(&gen.codeSect, s)
}

func (gen *generator) linef(format string, args ...any) {
	gen.flinef(&gen.codeSect, format, args...)
}

func (gen *generator) fline(w io.StringWriter, s string) {
	_, err := w.WriteString(strings.Repeat("\t", gen.indent))
	if err != nil {
		panic(err)
	}
	_, err = w.WriteString(s)
	if err != nil {
		panic(err)
	}
}

func (gen *generator) flinef(w io.StringWriter, format string, args ...any) {
	_, err := w.WriteString(strings.Repeat("\t", gen.indent))
	if err != nil {
		panic(err)
	}
	_, err = w.WriteString(fmt.Sprintf(format, args...))
	if err != nil {
		panic(err)
	}
}

const prelude = `/* GENERATED BY JET COMPILER */

#undef NDEBUG
#include <assert.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>

typedef int8_t   Ti8;
typedef int16_t  Ti16;
typedef int32_t  Ti32;
typedef int64_t  Ti64;
typedef uint8_t  Tu8;
typedef uint16_t Tu16;
typedef uint32_t Tu32;
typedef uint64_t Tu64;
typedef float    Tf32;
typedef double   Tf64;
typedef uint8_t  Tbool;
`

const fnMainHead = "\nint main(const int argc, const char *const *const argv)"
